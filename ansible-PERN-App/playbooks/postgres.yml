---
- name: configure postgreql
  hosts: _ansible_postgresql
  become: true
  vars_files:
    - secret.yml
  tasks: 
    - name: update all packages
      ansible.builtin.yum:
        name: '*'
        state: latest

    - name: remove pre-installed docker
      ansible.builtin.yum:
        name: 
          - docker
          - docker-client
          - docker-client-latest
          - docker-common
          - docker-latest
          - docker-latest-logrotate
          - docker-logrotate
          - docker-engine
        state: removed
        
    - name: install yum utils
      ansible.builtin.yum:
        name: "yum-utils"
        state: latest
    
    - name: add required repo for docker
      ansible.builtin.get_url:
        url: https://download.docker.com/linux/centos/docker-ce.repo
        dest: /etc/yum.repos.d/docker-ce.repo

    - name: install docker
      ansible.builtin.package: # yum also works
        name: docker-ce
        state: latest

    - name: add ec2-user to docker group # usermod -G ec2-user
      ansible.builtin.user:
        name: ec2-user
        groups:
          - docker
        append: yes # diger gruptan cikarma -a flag
    
    - name: start docker service
      ansible.builtin.service:
        name: docker
        state: started
        enabled: yes

    ########### DOCKER INSTALL COMPLETE ##########

    - name: copy necessary files postgreql
      ansible.builtin.copy:
        src: /home/ec2-user/ansible/ansible-project/postgres/  ## last slush for all contents in the folder
        dest: home/ec2-user/postgresql

    - name: delete container if exists
      community.docker.docker_container:
        name: cw_postgre
        state: absent 
        force_kill: true

    - name: delete image if exists 
      community.docker.docker_image:
        name: clarusway/postgre
        state: absent

    - name: now build docker image
      community.docker.docker_image:
        name: clarusway/postgre
        build:
          path: home/ec2-user/postgresql
        source: build
        state: present
      register: image_info # <-- for debug throw

    - name: debug if the image created correctly
      ansible.builtin.debug:
        var: image_info # <-- for debug catch

    - name: build container
      community.docker.docker_container:
        name: cw_postgre
        image: clarusway/postgre
        state: started
        ports:
          - "5432:5432"
        env:
          POSTGRES_PASSWORD: "{{ password }}"
        volumes:
          - /db-data:/var/lib/postgresql/data
      register: container_info # <-- for debug throw

    - name: debug if teh container running
      ansible.builtin.debug:
        var: container_info # <-- for debug catch























